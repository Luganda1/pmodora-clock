[{"C:\\Users\\tramr\\OneDrive\\Desktop\\website\\REACT.JS\\Free codecamp\\pmodora-clock\\src\\reportWebVitals.js":"1","C:\\Users\\tramr\\OneDrive\\Desktop\\website\\REACT.JS\\Free codecamp\\pmodora-clock\\src\\App.js":"2","C:\\Users\\tramr\\OneDrive\\Desktop\\website\\REACT.JS\\Free codecamp\\pmodora-clock\\src\\Length.js":"3"},{"size":362,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":3571,"mtime":1606839219761,"results":"6","hashOfConfig":"5"},{"size":692,"mtime":1606752982749,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"glywyp",{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tramr\\OneDrive\\Desktop\\website\\REACT.JS\\Free codecamp\\pmodora-clock\\src\\reportWebVitals.js",[],"C:\\Users\\tramr\\OneDrive\\Desktop\\website\\REACT.JS\\Free codecamp\\pmodora-clock\\src\\App.js",["15","16"],"import React from \"react\"\nimport Length from \"./Length\"\nimport {AiOutlinePause, AiOutlinePlayCircle, AiOutlineHistory} from \"react-icons/ai\"\n\n\nfunction App() {\n\n  const [displayTime, setDisplayTime] = React.useState(25*60)\n  const [breakTime, setBreakTime] = React.useState(5*60)\n  const [sessionTime, setSessionTime] = React.useState(25*60)\n  const [timerOn, setTimerOn ] = React.useState(false)\n  const [onBreak, setOnBreak] = React.useState(false)\n  const [breakAudio, setBreakAudio] = React.useState(\n    new Audio(\"./censorBeep.mp3\")\n  );\n\n\n  const playSound = () => {\n    breakAudio.currentTime = 0;\n    breakAudio.play()\n  }\n\n    const formatTime = time => {\n      let minutes = Math.floor(time/60);\n      let seconds = time % 60;\n      return (\n        (minutes < 10 ? \"0\" + minutes : minutes)\n        + \":\" +\n        (seconds < 10 ? \"0\" + seconds : seconds)\n      )\n    }\n\n      const changeTime = (amount, type) => {\n        if(type === \"break\") {\n          if(breakTime <= 60 && amount < 0) {\n            return;\n          }\n          setBreakTime(prev => prev + amount)\n        }\n        else {\n          if(sessionTime <= 60 && amount < 0) {\n            return;\n          }\n          setSessionTime(prev => prev + amount)\n        };\n        if(!timerOn) {\n          setDisplayTime(sessionTime + amount)\n        }\n      }\n\n\n\n    const reset = () => {\n      setDisplayTime(25*60)\n      setBreakTime(5*60)\n      setSessionTime(25*60)\n    }\n\n    const controlTime = () => {\n      let second = 1000;\n      let date = new Date().getTime();\n      let nextDate = new Date().getTime() + second;\n      let onBreakVariable = onBreak;\n      if(!timerOn) {\n        let interval = setInterval(() => {\n          let date = new Date().getTime();\n            if(date > nextDate) {\n              setDisplayTime(prev => {\n                if(prev <= 0 && !onBreakVariable) {\n                  playSound();\n                  onBreakVariable=true;\n                  setOnBreak(true);\n                  return breakTime;\n                }\n                else if(prev <= 0 && !onBreakVariable) {\n                  playSound();\n                  onBreakVariable = false;\n                  setOnBreak(false);\n                  return sessionTime;\n                }\n                return prev - 1;\n              })\n              nextDate += second;\n            }\n        }, 30);\n        localStorage.clear();\n        localStorage.setItem(\"interval-id\", interval)\n      }\n\n      if(timerOn) {\n        clearInterval(localStorage.getItem(\"interval-id\"));\n      }\n      setTimerOn(!timerOn);\n    }\n\n  return (\n    <div className=\"app\">\n      <div className=\"row\">\n        <Length \n        title={\"Break Length\"}\n        type={\"break\"}\n        changeTime={changeTime}\n        time={breakTime}\n        formatTime={formatTime}\n        ></Length>\n        <Length \n        title={\"Session Length\"}\n        type={\"session\"}\n        changeTime={changeTime}\n        time={sessionTime}\n        formatTime={formatTime}\n        ></Length>\n\n      </div>\n      <div className=\"time\">\n        <h3>{onBreak ? \"Break\" : \"Session\"}</h3>\n        <h1>{formatTime(displayTime)}</h1>\n      <button \n        id=\"start_stop\" \n        className={`button button-primary `}\n        onClick={controlTime}\n        >{timerOn ? (<h2><AiOutlinePause/></h2>) : (<h2><AiOutlinePlayCircle/></h2>)}</button>\n        \n        <button id=\"reset\" \n        onClick={reset} \n        className=\"button button-primary\">\n          <h2><AiOutlineHistory/></h2>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\tramr\\OneDrive\\Desktop\\website\\REACT.JS\\Free codecamp\\pmodora-clock\\src\\Length.js",[],{"ruleId":"17","severity":1,"message":"18","line":13,"column":22,"nodeType":"19","messageId":"20","endLine":13,"endColumn":35},{"ruleId":"17","severity":1,"message":"21","line":61,"column":11,"nodeType":"19","messageId":"20","endLine":61,"endColumn":15},"no-unused-vars","'setBreakAudio' is assigned a value but never used.","Identifier","unusedVar","'date' is assigned a value but never used."]